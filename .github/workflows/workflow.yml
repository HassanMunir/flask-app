name: Flask CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  built-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os}}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Check for outdated dependencies
        run: |
          pip install pip-review
          pip-review --auto
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Install dependencies
        uses: py-actions/py-dependency-install@v4
        with:
          path: requirements.txt
      
      - name: Run Bandit for SAST
        run: |
          bandit -r app -c bandit.yaml

      - name: Run Flake8 & Black Code Formatter
        run: |
          flake8 app
          black app

      - name: Run pytest
        run: |
          pytest tests --maxfail=1 --cov=app --disable-warnings --verbose

      - name: Run pytest with coverage
        run: |
          coverage run -m pytest
          coverage report
          coverage html

  docker-build-and-push:
    needs: built-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Image Tags
        run: |
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_TAG=ghcr.io/${REPO_OWNER}/flask-app:${{ github.sha }}" >> $GITHUB_ENV
          echo "IMAGE_TAG_LATEST=ghcr.io/${REPO_OWNER}/flask-app:latest" >> $GITHUB_ENV

      - name: Build Docker Image
        run: |
          docker build -t $IMAGE_TAG -t $IMAGE_TAG_LATEST .

      - name: Scan image
        uses: anchore/scan-action@v6
        with:
          image: "${{ env.IMAGE_TAG_LATEST }}"
          fail-build: false

      - uses: anchore/sbom-action@v0
        with:
          image: "${{ env.IMAGE_TAG_LATEST }}"
          path: .
          format: spdx-json
          upload-artifact: true
          upload-release-assets: true

      - name: Push Docker Image to GHCR
        run: |
          docker push $IMAGE_TAG
          docker push $IMAGE_TAG_LATEST
